<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1" />
  <title>MediaSource API Demo</title>
</head>
<body>

  <h1>Appending video chunks using the Media Source API</h1>

  <video controls autoplay width="320" height="240"></video>

<script>
  /* eslint-disable no-console, no-alert */

  const SUFFIX = 'mp4'
  const CODECS = (SUFFIX === 'mp4' ? 'avc1.42E01E, mp4a.40.2' : 'opus,vp9')
  // eslint-disable-next-line no-constant-condition
  const FILE = 1
    ? 'commute_dashinit.mp4'
    : `https://cors.archive.org/cors/commute/commute.${SUFFIX}`

  const NUM_CHUNKS = 10
  const video = document.querySelector('video')

  window.MediaSource = window.MediaSource || window.WebKitMediaSource
  if (!window.MediaSource) {
    alert('MediaSource API is not available')
  }

  const mediaSource = new MediaSource()


  video.src = window.URL.createObjectURL(mediaSource)

  function callback() {
    const sourceBuffer = mediaSource.addSourceBuffer(`video/${SUFFIX}; codecs="${CODECS}"`)

    console.log(`mediaSource readyState: ${this.readyState}`)

    // eslint-disable-next-line no-use-before-define
    GET(FILE, (uInt8Array) => {
      const file = new Blob([uInt8Array], { type: `video/${SUFFIX}` })
      const chunkSize = Math.ceil(file.size / NUM_CHUNKS)

      console.log(`num chunks:${NUM_CHUNKS}`)
      console.log(`chunkSize:${chunkSize}, totalSize:${file.size}`)

      // Slice the video into NUM_CHUNKS and append each to the media element.
      let num = 0;

      (function readChunk_() {
        const reader = new FileReader()

        // Reads aren't guaranteed to finish in the same order they're started in,
        // so we need to read + append the next chunk after the previous reader
        // is done (onload is fired).
        reader.onload = function onload(e) {
          setTimeout(() => {
            sourceBuffer.appendBuffer(new Uint8Array(e.target.result))
            console.log(`appending chunk:${num}`)
            if (num === NUM_CHUNKS - 1) {
              mediaSource.endOfStream()
            } else {
              if (video.paused) {
                // video.play(); // Start playing after 1st chunk is appended.
              }
              num += 1
              readChunk_()
            }
          }, 100)
        }

        const startByte = chunkSize * num
        const chunk = file.slice(startByte, startByte + chunkSize)

        reader.readAsArrayBuffer(chunk)
      }())  // Start the recursive call by self calling.
    })
  }

  mediaSource.addEventListener('sourceopen', callback, false)
  mediaSource.addEventListener('webkitsourceopen', callback, false)

  mediaSource.addEventListener('webkitsourceended', function webkitsourceended() {
    console.log(`mediaSource readyState: ${this.readyState}`)
  }, false)

  function GET(url, callbacky) {
    const xhr = new XMLHttpRequest()
    xhr.open('GET', url, true)
    xhr.responseType = 'arraybuffer'
    xhr.send()

    xhr.onload = function onload() {
      if (xhr.status !== 200)
        alert(`Unexpected status code ${xhr.status} for ${url}`)
      else
        callbacky(new Uint8Array(xhr.response))
    }
  }
</script>
</body>
</html>
