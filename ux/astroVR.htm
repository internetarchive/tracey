<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Connecting up Google Cardboard to web APIs</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
      body {
        margin: 0px;
        overflow: hidden;
      }
      #webglviewer {
        bottom: 0;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
      }
    </style>
  </head>
  <body>
    <div id="webglviewer"></div>

<script type="module">
  import * as THREE from 'https://esm.archive.org/three@0.113.2'
  import { OrbitControls } from 'https://esm.archive.org/three@0.113.2/examples/jsm/controls/OrbitControls.js'
  import { StereoEffect  } from 'https://esm.archive.org/three@0.113.2/examples/jsm/effects/StereoEffect.js'


  let scene
  let camera
  let renderer
  let element
  let container
  let effect
  let controls

  // Particles
  const particles = new THREE.Object3D()
  const totalParticles = 200
  const maxParticleSize = 200

  function init() {
    scene = new THREE.Scene()
    camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.001, 700)
    camera.position.set(0, 15, 0)
    scene.add(camera)

    renderer = new THREE.WebGLRenderer()
    element = renderer.domElement
    container = document.getElementById('webglviewer')
    container.appendChild(element)

    effect = new StereoEffect(renderer)

    // Our initial control fallback with mouse/touch events in case DeviceOrientation is not enabled
    controls = new OrbitControls(camera, element)
    controls.target.set(
      camera.position.x + 0.15,
      camera.position.y,
      camera.position.z,
    )
    controls.noPan = true
    controls.noZoom = true

    // Our preferred controls via DeviceOrientation
    function setOrientationControls(e) {
      if (!e.alpha)
        return

      controls = new THREE.DeviceOrientationControls(camera, true)
      controls.connect()
      controls.update()

      // eslint-disable-next-line no-use-before-define
      element.addEventListener('click', fullscreen, false)
      window.removeEventListener('deviceorientation', setOrientationControls, true)
    }
    window.addEventListener('deviceorientation', setOrientationControls, true)

    // Lighting
    const light = new THREE.PointLight(0x999999, 2, 100)
    light.position.set(50, 50, 50)
    scene.add(light)

    const lightScene = new THREE.PointLight(0x999999, 2, 100)
    lightScene.position.set(0, 5, 0)
    scene.add(lightScene)

    const floorTexture = THREE.ImageUtils.loadTexture('images/glogo.png')
    floorTexture.wrapS = THREE.RepeatWrapping
    floorTexture.wrapT = THREE.RepeatWrapping
    floorTexture.repeat = new THREE.Vector2(50, 50)
    floorTexture.anisotropy = renderer.getMaxAnisotropy()

    const floorMaterial = new THREE.MeshPhongMaterial({
      color: 0xffffff,
      specular: 0xffffff,
      shininess: 20,
      shading: THREE.FlatShading,
      map: floorTexture,
    })

    const geometry = new THREE.PlaneBufferGeometry(1000, 1000)

    const floor = new THREE.Mesh(geometry, floorMaterial)
    floor.rotation.x = -Math.PI / 2
    scene.add(floor)

    const particleTexture = THREE.ImageUtils.loadTexture('images/astronaut.png')
    const spriteMaterial = new THREE.SpriteMaterial({
      map: particleTexture,
      color: 0xffffff,
    })

    for (let i = 0; i < totalParticles; i++) {
      const sprite = new THREE.Sprite(spriteMaterial)

      sprite.scale.set(64, 64, 1.0)
      sprite.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.75)
      sprite.position.setLength(maxParticleSize * Math.random())

      sprite.material.blending = THREE.AdditiveBlending

      particles.add(sprite)
    }
    particles.position.y = 70
    scene.add(particles)

    // eslint-disable-next-line no-use-before-define
    animate()
  }


  function resize() {
    const width = container.offsetWidth
    const height = container.offsetHeight

    camera.aspect = width / height
    camera.updateProjectionMatrix()

    renderer.setSize(width, height)
    effect.setSize(width, height)
  }


  function animate() {
    requestAnimationFrame(animate)

    resize()

    camera.updateProjectionMatrix()

    controls.update()

    effect.render(scene, camera)
  }


  function fullscreen() {
    if (container.requestFullscreen)
      container.requestFullscreen()
    else if (container.msRequestFullscreen)
      container.msRequestFullscreen()
    else if (container.mozRequestFullScreen)
      container.mozRequestFullScreen()
    else if (container.webkitRequestFullscreen)
      container.webkitRequestFullscreen()
  }

  init()
</script>

</body>
</html>
